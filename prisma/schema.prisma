generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

// User model
model User {
  id                     String         @id @default(cuid())
  email                  String         @unique
  name                   String
  password               String
  phone                  String
  role                   Role           @default(STORE_OWNER)
  isActive               Boolean        @default(true)
  isEmailVerified        Boolean        @default(false)
  emailVerificationToken String?
  emailVerificationExpire DateTime?
  resetPasswordToken     String?
  resetPasswordExpire    DateTime?
  lastLogin              DateTime?
  trialStartDate         DateTime       @default(now())
  trialEndDate           DateTime
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt

  // Relations
  store                  Store?
  subscription           Subscription?
  chats                  Chat[]         @relation("UserChats")
  adminActivities        AdminActivityLog[] @relation("AdminActivities")
  notifications          SystemNotification[] @relation("UserNotifications")

  @@index([email])
}

// Store model
model Store {
  id            String    @id @default(cuid())
  ownerId       String    @unique
  owner         User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  // Basic info
  name          String
  description   String?
  logo          String?
  banner        String?
  subdomain     String    @unique
  customDomain  String?   @unique

  // Contact
  whatsappNumber String
  email         String?

  // Address
  street        String?
  city          String?
  state         String?
  country       String?
  postalCode    String?

  // Social Media
  facebook      String?
  instagram     String?
  twitter       String?
  youtube       String?

  // Settings
  currency      Currency  @default(IDR)
  primaryColor  String    @default("#007bff")
  secondaryColor String   @default("#6c757d")
  fontFamily    String    @default("Inter")
  layout        Layout    @default(GRID)

  // Limits & Usage
  storageUsed   BigInt    @default(0)
  storageLimit  BigInt    @default(104857600) // 100MB in bytes
  productLimit  Int       @default(50)
  monthlyVisits Int       @default(0)

  // Status
  isActive      Boolean   @default(true)
  isVerified    Boolean   @default(false)

  // Analytics
  rating        Float     @default(0)
  totalReviews  Int       @default(0)
  totalSales    Int       @default(0)
  totalRevenue  Decimal   @default(0) 

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  products      Product[]
  orders        Order[]
  customers     Customer[]
  chats         Chat[]
  subscription  Subscription?
  financialTransactions FinancialTransaction[] @relation("StoreFinancials")
  recurringTransactions RecurringTransaction[] @relation("StoreRecurringTransactions")
  analytics     StoreAnalytics[] @relation("StoreAnalytics")
  notifications SystemNotification[] @relation("StoreNotifications")
  whatsappSettings WhatsAppSettings?

  @@index([subdomain])
  @@index([customDomain])
}

// Product model
model Product {
  id            String    @id @default(cuid())
  storeId       String
  store         Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)

  // Basic info
  name          String
  description   String
  category      Category
  subCategory   String?

  // Pricing
  price         Decimal   
  comparePrice  Decimal?  
  cost          Decimal   @default(0) 
  profit        Decimal   @default(0) 
  profitMargin  Float     @default(0)

  // Inventory
  sku           String?   @unique
  barcode       String?
  stock         Int       @default(0)
  trackInventory Boolean  @default(true)
  lowStockAlert Int       @default(5)

  // Physical attributes
  weight        Float?
  weightUnit    WeightUnit @default(KG)
  length        Float?
  width         Float?
  height        Float?
  dimensionUnit DimensionUnit @default(CM)

  // SEO
  slug          String
  metaTitle     String?
  metaDescription String?

  // Status
  visibility    Visibility @default(VISIBLE)
  publishDate   DateTime   @default(now())
  featured      Boolean    @default(false)
  isActive      Boolean    @default(true)

  // Analytics
  views         Int        @default(0)
  sold          Int        @default(0)
  ratingAverage Float      @default(0)
  ratingCount   Int        @default(0)

  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  // Relations
  images        ProductImage[]
  videos        ProductVideo[]
  orderItems    OrderItem[]
  tags          ProductTag[]

  @@unique([storeId, slug])
  @@index([storeId, isActive])
  @@index([category])
}

// Product Image model
model ProductImage {
  id          String    @id @default(cuid())
  productId   String
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  url         String
  alt         String?
  isPrimary   Boolean   @default(false)
  source      ImageSource @default(UPLOAD)
  createdAt   DateTime  @default(now())
}

// Product Video model
model ProductVideo {
  id          String    @id @default(cuid())
  productId   String
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  url         String
  title       String?
  source      VideoSource @default(YOUTUBE)
  thumbnail   String?
  createdAt   DateTime  @default(now())
}

// Product Tag model
model ProductTag {
  id          String    @id @default(cuid())
  name        String
  productId   String
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, name])
}

// Order model
model Order {
  id            String    @id @default(cuid())
  storeId       String
  store         Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  orderNumber   String    @unique @default(cuid())

  // Customer relation
  customerId    String?
  customer      Customer? @relation("CustomerOrders", fields: [customerId], references: [id], onDelete: SetNull)

  // Customer info (for backward compatibility and guest orders)
  customerName  String
  customerEmail String?
  customerPhone String
  customerWhatsapp String?

  // Shipping address
  shippingStreet String?
  shippingCity   String?
  shippingState  String?
  shippingCountry String?
  shippingPostalCode String?
  shippingNotes  String?

  // Pricing
  subtotal      Decimal   
  shipping      Decimal   @default(0) 
  tax           Decimal   @default(0) 
  discount      Decimal   @default(0) 
  total         Decimal   
  totalCost     Decimal   @default(0) 
  totalProfit   Decimal   @default(0) 

  // Payment
  paymentMethod PaymentMethod @default(WHATSAPP)
  paymentStatus PaymentStatus @default(PENDING)
  transactionId String?
  paidAt        DateTime?

  // Status
  status        OrderStatus @default(PENDING)
  notes         String?
  source        OrderSource @default(WEBSITE)

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  items         OrderItem[]
  financialTransactions FinancialTransaction[]

  @@index([storeId, status])
  @@index([orderNumber])
}

// Order Item model
model OrderItem {
  id          String    @id @default(cuid())
  orderId     String
  order       Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId   String
  product     Product   @relation(fields: [productId], references: [id])

  name        String
  price       Decimal   
  cost        Decimal   @default(0) 
  quantity    Int
  subtotal    Decimal   
  profit      Decimal   @default(0) 

  variant     String?
  createdAt   DateTime  @default(now())
}

// Subscription model
model Subscription {
  id            String    @id @default(cuid())
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  storeId       String    @unique
  store         Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)

  plan          SubscriptionPlan @default(FREE)
  status        SubscriptionStatus @default(TRIAL)

  // Features based on plan
  productLimit  Int       @default(10)
  storageLimit  BigInt    @default(104857600) // 100MB
  customDomain  Boolean   @default(false)
  aiLandingPage Boolean   @default(false)
  advancedAnalytics Boolean @default(false)
  prioritySupport Boolean  @default(false)
  removeWatermark Boolean  @default(false)
  multipleStores Int      @default(1)
  teamMembers   Int       @default(1)
  apiAccess     Boolean   @default(false)

  // Billing
  billingCycle  BillingCycle @default(MONTHLY)
  price         Decimal   @default(0) 
  currency      Currency  @default(IDR)

  // Dates
  trialStartDate DateTime @default(now())
  trialEndDate  DateTime
  startDate     DateTime?
  endDate       DateTime?
  nextBillingDate DateTime?
  lastPaymentDate DateTime?

  // Payment
  stripeCustomerId String?
  stripeSubscriptionId String?
  autoRenew     Boolean   @default(true)

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Chat model
model Chat {
  id            String    @id @default(cuid())
  storeId       String
  store         Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)

  // Participants
  userId        String?
  user          User?     @relation("UserChats", fields: [userId], references: [id])
  customerName  String?
  customerPhone String?
  customerEmail String?

  // Status
  status        ChatStatus @default(ACTIVE)
  priority      Priority   @default(MEDIUM)

  // Metadata
  lastMessage   String?
  lastMessageAt DateTime?
  unreadCount   Int       @default(0)

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  messages      ChatMessage[]

  @@index([storeId, status])
}

// Chat Message model
model ChatMessage {
  id          String    @id @default(cuid())
  chatId      String
  chat        Chat      @relation(fields: [chatId], references: [id], onDelete: Cascade)

  senderType  SenderType
  senderName  String?
  message     String

  isRead      Boolean   @default(false)
  readAt      DateTime?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Customer model
model Customer {
  id            String    @id @default(cuid())
  storeId       String
  store         Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)

  // Basic info
  name          String
  email         String?
  phone         String
  whatsappNumber String?

  // Address
  street        String?
  city          String?
  state         String?
  country       String?
  postalCode    String?

  // Additional info
  birthDate     DateTime?
  gender        Gender?
  notes         String?

  // Status
  status        CustomerStatus @default(ACTIVE)
  tags          String[]  // For custom categorization

  // Analytics
  totalOrders   Int       @default(0)
  totalSpent    Decimal   @default(0)
  lastOrderDate DateTime?
  firstOrderDate DateTime?
  averageOrderValue Decimal @default(0)

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  orders        Order[]   @relation("CustomerOrders")

  @@unique([storeId, phone])
  @@index([storeId, status])
  @@index([storeId, email])
}

// ENUMS
enum Role {
  SUPER_ADMIN
  ADMIN
  STORE_OWNER
  CUSTOMER
}

enum Currency {
  IDR
  USD
  EUR
  MYR
  SGD
}

enum Layout {
  GRID
  LIST
}

enum Category {
  ELECTRONICS
  FASHION
  FOOD_BEVERAGES
  HEALTH_BEAUTY
  HOME_LIVING
  BOOKS_STATIONERY
  SPORTS_OUTDOORS
  TOYS_GAMES
  AUTOMOTIVE
  SERVICES
  DIGITAL_PRODUCTS
  OTHER
}

enum WeightUnit {
  G
  KG
  LB
  OZ
}

enum DimensionUnit {
  CM
  M
  IN
  FT
}

enum Visibility {
  VISIBLE
  HIDDEN
  SCHEDULED
}

enum ImageSource {
  UPLOAD
  DRIVE
  EXTERNAL
}

enum VideoSource {
  YOUTUBE
  VIMEO
  UPLOAD
}

enum PaymentMethod {
  WHATSAPP
  BANK_TRANSFER
  COD
  STRIPE
  PAYPAL
  MIDTRANS
}

enum PaymentStatus {
  PENDING
  PROCESSING
  PAID
  FAILED
  REFUNDED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  COMPLETED
  CANCELLED
  REFUNDED
}

enum OrderSource {
  WEBSITE
  WHATSAPP
  INSTAGRAM
  FACEBOOK
  MANUAL
}

enum SubscriptionPlan {
  FREE
  STARTER
  PROFESSIONAL
  ENTERPRISE
}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  INACTIVE
  CANCELLED
  EXPIRED
}

enum BillingCycle {
  MONTHLY
  YEARLY
  LIFETIME
}

enum ChatStatus {
  ACTIVE
  RESOLVED
  ARCHIVED
  BLOCKED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum SenderType {
  CUSTOMER
  STORE_OWNER
  ADMIN
  SYSTEM
}

// Financial Transaction model for income/expense tracking
model FinancialTransaction {
  id            String    @id @default(cuid())
  storeId       String
  store         Store     @relation("StoreFinancials", fields: [storeId], references: [id], onDelete: Cascade)

  // Transaction details
  type          TransactionType
  category      TransactionCategory
  amount        Decimal
  description   String
  reference     String?   // Order ID, invoice number, etc.

  // Categorization
  tags          String[]  // For custom categorization

  // Metadata
  isRecurring   Boolean   @default(false)
  recurringId   String?   // Link to parent recurring transaction

  // Date tracking
  transactionDate DateTime @default(now())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations - One transaction can relate to one order, but orders can have multiple transactions
  order         Order?    @relation(fields: [reference], references: [orderNumber], onDelete: SetNull)

  @@index([storeId, type])
  @@index([storeId, transactionDate])
  @@index([storeId, category])
}

// Enhanced Order model with better financial tracking
model RecurringTransaction {
  id            String    @id @default(cuid())
  storeId       String
  store         Store     @relation("StoreRecurringTransactions", fields: [storeId], references: [id], onDelete: Cascade)

  // Template details
  type          TransactionType
  category      TransactionCategory
  amount        Decimal
  description   String

  // Recurrence settings
  frequency     RecurrenceFrequency
  interval      Int       @default(1) // Every N periods
  dayOfMonth    Int?      // For monthly/yearly
  dayOfWeek     Int?      // For weekly (0=Sunday)

  // Date range
  startDate     DateTime
  endDate       DateTime?
  nextDate      DateTime

  // Status
  isActive      Boolean   @default(true)

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([storeId, isActive])
  @@index([nextDate])
}

// Super Admin Activity Log
model AdminActivityLog {
  id            String    @id @default(cuid())
  adminId       String
  admin         User      @relation("AdminActivities", fields: [adminId], references: [id], onDelete: Cascade)

  action        AdminAction
  targetType    String    // 'user', 'store', 'subscription', etc.
  targetId      String    // ID of the affected entity
  description   String
  metadata      Json?     // Additional data about the action

  ipAddress     String?
  userAgent     String?

  createdAt     DateTime  @default(now())

  @@index([adminId])
  @@index([action])
  @@index([createdAt])
}

// Store Analytics Snapshot
model StoreAnalytics {
  id            String    @id @default(cuid())
  storeId       String
  store         Store     @relation("StoreAnalytics", fields: [storeId], references: [id], onDelete: Cascade)

  // Period
  date          DateTime
  period        AnalyticsPeriod

  // Sales metrics
  totalOrders   Int       @default(0)
  totalRevenue  Decimal   @default(0)
  totalProfit   Decimal   @default(0)
  avgOrderValue Decimal   @default(0)

  // Product metrics
  totalProducts Int       @default(0)
  activeProducts Int      @default(0)
  outOfStock    Int       @default(0)

  // Traffic metrics
  totalViews    Int       @default(0)
  uniqueVisitors Int      @default(0)
  conversionRate Float    @default(0)

  // Financial metrics
  totalIncome   Decimal   @default(0)
  totalExpenses Decimal   @default(0)
  netProfit     Decimal   @default(0)

  createdAt     DateTime  @default(now())

  @@unique([storeId, date, period])
  @@index([storeId, period])
  @@index([date])
}

// System Notification model
model SystemNotification {
  id            String    @id @default(cuid())

  // Target
  userId        String?
  user          User?     @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
  storeId       String?
  store         Store?    @relation("StoreNotifications", fields: [storeId], references: [id], onDelete: Cascade)

  // Content
  title         String
  message       String
  type          NotificationType
  priority      Priority  @default(MEDIUM)

  // Actions
  actionUrl     String?
  actionLabel   String?

  // Status
  isRead        Boolean   @default(false)
  readAt        DateTime?

  // Scheduling
  scheduledFor  DateTime?
  expiresAt     DateTime?

  createdAt     DateTime  @default(now())

  @@index([userId, isRead])
  @@index([storeId, isRead])
  @@index([type, priority])
}

// New enums for financial tracking
enum TransactionType {
  INCOME
  EXPENSE
}

enum TransactionCategory {
  // Income categories
  PRODUCT_SALES
  SERVICE_SALES
  REFUNDS_RECEIVED
  INVESTMENT_INCOME
  OTHER_INCOME

  // Expense categories
  INVENTORY_PURCHASE
  MARKETING_ADVERTISING
  SHIPPING_FULFILLMENT
  OFFICE_SUPPLIES
  UTILITIES
  RENT_LEASE
  INSURANCE
  PROFESSIONAL_SERVICES
  TAXES_FEES
  EQUIPMENT_SOFTWARE
  TRAVEL_MEALS
  REFUNDS_ISSUED
  OTHER_EXPENSE
}

enum RecurrenceFrequency {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

enum AdminAction {
  USER_CREATED
  USER_ACTIVATED
  USER_DEACTIVATED
  USER_DELETED
  TRIAL_EXTENDED
  TRIAL_ENDED
  TRIAL_CONVERTED
  TRIAL_REMINDER_SENT
  SUBSCRIPTION_ACTIVATED
  SUBSCRIPTION_CANCELLED
  STORE_VERIFIED
  STORE_SUSPENDED
  PAYMENT_PROCESSED
  SYSTEM_SETTING_CHANGED
}

enum AnalyticsPeriod {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

enum NotificationType {
  TRIAL_EXPIRING
  TRIAL_EXPIRED
  PAYMENT_DUE
  PAYMENT_FAILED
  SUBSCRIPTION_ACTIVATED
  SUBSCRIPTION_CANCELLED
  STORE_LIMIT_REACHED
  SECURITY_ALERT
  SYSTEM_MAINTENANCE
  FEATURE_ANNOUNCEMENT
  GENERAL
}

enum CustomerStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

// WhatsApp Settings model
model WhatsAppSettings {
  id            String    @id @default(cuid())
  storeId       String    @unique
  store         Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)

  // Basic settings
  isEnabled     Boolean   @default(true)
  phoneNumber   String
  businessName  String

  // Message templates
  greetingMessage           String    @default("Hi! Welcome to our store. How can we help you today?")
  orderConfirmationTemplate String    @default("Thank you for your order! We have received your order #[ORDER_ID] and will process it shortly.")
  awayMessage              String    @default("Thanks for your message! We will get back to you as soon as possible.")

  // Business hours
  businessHoursEnabled Boolean   @default(false)
  businessHoursStart   String?   // Format: "HH:MM"
  businessHoursEnd     String?   // Format: "HH:MM"
  businessHoursTimezone String   @default("Asia/Jakarta")

  // Auto-reply settings
  autoReplyEnabled Boolean   @default(false)
  welcomeMessageEnabled Boolean @default(true)

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([storeId])
}